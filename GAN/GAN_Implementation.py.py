# -*- coding: utf-8 -*-
"""CYNAPTICS TASK 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y8NaOG4dSGcBS7g9N-8lEuljgELlzxoZ
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as T
from torch.utils.tensorboard import SummaryWriter

!pip install tensorboard

class Discriminator(nn.Module):
  def __init__(self, channels_img, features_d):
    super (Discriminator, self).__init__()
    self.disc=nn.Sequential(
        nn.Conv2d(
            channels_img, features_d, kernel_size=4, stride=2, padding=1
        ),
        nn.LeakyReLU(0.2),
        self._block(features_d, features_d*2, 4, 2, 1),
        self._block(features_d*2, features_d*4, 4, 2, 1),
        self._block(features_d*4, features_d*8, 4, 2, 1),
        nn.Conv2d(features_d*8, 1, kernel_size=4, stride=2, padding=0),
        nn.Sigmoid(),
   )

  def _block(self, in_channels, out_channels, kernel_size, stride, padding):
   return nn.Sequential(
      nn.Conv2d(
          in_channels,
          out_channels,
          kernel_size,
          stride,
          padding,
          bias=False,
      ),
      nn.BatchNorm2d(out_channels),
      nn.LeakyReLU(0.2),
  )
  def forward(self, x):
   return self.disc(x)

class Generator(nn.Module):
  def __init__(self,z_dim, channels_img, features_g):
    super (Generator, self).__init__()
    self.gen=nn.Sequential(
        self._block(z_dim, features_g*16, 4, 1, 0),
        self._block( features_g*16, features_g*8, 4, 2, 1),
        self._block(features_g*8, features_g*4, 4, 2, 1),
        self._block(features_g*4, features_g*2, 4, 2, 1),
        nn.ConvTranspose2d(
            features_g*2, channels_img, kernel_size=4, stride=2, padding=1),
        nn.Tanh(),
   )

  def _block(self, in_channels, out_channels, kernel_size, stride, padding):
    return nn.Sequential(
      nn.ConvTranspose2d(
          in_channels,
          out_channels,
          kernel_size,
          stride,
          padding,
          bias=False,
      ),
      nn.BatchNorm2d(out_channels),
      nn.ReLU(),
  )

  def forward(self, x):
    return self.gen(x)

  def initialize_weights(self, model):
    for m in model.modules():
      if isinstance(m,(nn.Conv2d, nn.ConvTranspose2d, nn.BatchNorm2d)):
        nn.init.normal_(m.weight.data, 0.0, 0.02)

  def test(self):
    N, in_channels, H, W=8, 3, 64, 64
    z_dim= 100
    x= torch.randn((N, in_channels, H, W))
    disc = Discriminator(in_channels, 8)
    self.initialize_weights(disc)
    assert disc(x).shape==(N, 1, 1, 1)
    gen = Generator(z_dim, in_channels, 8)
    self.initialize_weights(gen)
    z = torch.randn((N, z_dim, 1, 1))
    assert gen(z).shape == (N, in_channels, H, W)
    print("Success")

gen_instance = Generator(z_dim=100, channels_img=3, features_g=8) # Replace with your desired values
gen_instance.test()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
LEARNING_RATE = 2e-4
BATCH_SIZE = 128
IMAGE_SIZE = 64
CHANNELS_IMG = 1
Z_DIM = 100
NUM_EPOCHS = 5
FEATURES_DISC = 64
FEATURES_GEN = 64

data_transforms = T.Compose(
    [
        T.Resize(IMAGE_SIZE),
        T.ToTensor(),
        T.Normalize(
            [0.5 for _ in range(CHANNELS_IMG)], [0.5 for _ in range(CHANNELS_IMG)]
        ),
    ]
)

dataset = datasets.MNIST(root="dataset/", train=True, transform=data_transforms, download=True)
loader= DataLoader(dataset, batch_size=BATCH_SIZE, shuffle=True)
gen = Generator(Z_DIM, CHANNELS_IMG, FEATURES_GEN).to(device)
disc = Discriminator(CHANNELS_IMG, FEATURES_DISC).to(device)
for m in gen.modules():
  if isinstance(m,(nn.Conv2d, nn.ConvTranspose2d, nn.BatchNorm2d)):
    nn.init.normal_(m.weight.data, 0.0, 0.02)
for m in disc.modules():
  if isinstance(m,(nn.Conv2d, nn.ConvTranspose2d, nn.BatchNorm2d)):
    nn.init.normal_(m.weight.data, 0.0, 0.02)

opt_gen = optim.Adam(gen.parameters(), lr=LEARNING_RATE, betas=(0.5, 0.999))
opt_disc = optim.Adam(disc.parameters(), lr=LEARNING_RATE, betas=(0.5, 0.999))
criterion = nn.BCELoss()

fixed_noise = torch.randn(32, Z_DIM, 1, 1).to(device)
writer_real = SummaryWriter(f"logs/real")
writer_fake = SummaryWriter(f"logs/fake")
step = 0

gen.train()
disc.train()

for epoch in range(NUM_EPOCHS):
  for batch_idx, (real, _) in enumerate(loader):
    real = real.to(device)
    noise = torch.randn((BATCH_SIZE, Z_DIM, 1, 1)).to(device)
    fake = gen(noise)

    # train disc
    disc_real = disc(real).reshape(-1)
    loss_disc_real = criterion(disc_real, torch.ones_like(disc_real))
    disc_fake = disc(fake).reshape(-1)
    loss_disc_fake = criterion(disc_fake, torch.zeros_like(disc_fake))
    loss_disc = (loss_disc_real + loss_disc_fake) / 2
    disc.zero_grad()
    loss_disc.backward(retain_graph=True)
    opt_disc.step()

# train gen
    output = disc(fake).reshape(-1)
    loss_gen = criterion(output, torch.ones_like(output))
    gen.zero_grad()
    loss_gen.backward()
    opt_gen.step()

    if batch_idx % 100 == 0:
      print(
          f"Epoch [{epoch}/{NUM_EPOCHS}] Batch {batch_idx}/{len(loader)} \
            Loss D: {loss_disc:.4f}, Loss G: {loss_gen:.4f}"
      )

      with torch.no_grad():
        fake = gen(fixed_noise)

        img_grid_real = torchvision.utils.make_grid(real[:32], normalize=True)
        img_grid_fake = torchvision.utils.make_grid(fake[:32], normalize=True)

        writer_real.add_image("Real", img_grid_real, global_step=step)
        writer_fake.add_image("Fake", img_grid_fake, global_step=step)

      step += 1

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir logs